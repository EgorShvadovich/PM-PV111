Проект - совокупность работ(подзадач, процессов) у которых одна цель.

Управление проектами:
  - Деятельность по организации проектных работ
  - наука, изучающая способы, методы управления проектами

Составляющие:
  - Управление ресурсами
    = материальными (в т.ч. Бюджет)
    = людскими (НR)
    = логистика
  - Управление временем (Time Managment)
  - Управление качеством
    = управление рискаим
  - Управление знаниями
    = управление безопасностью (информация с ограниченным доступом)
    = bus-factor: зависимость/независимость от персоналии
    -> более быстрое/простое повторение подобного проекта

Схемы управления проектами (группы схем)
  - "жесткие", "водопадные"
  - "гибкие", "водоворотные"

Жесткие схемы - с фиксированной последовательностью работ на весь проект
Чаще всего, эта последовательность попадается в виде диаграмы Ганта
---------------------------------------------------------------------------> время
согласование ТЗ
---------------
        Дизайн UI                доработка по результатам тестов
        ----------                ----------
      Архитектура ДБ                
      -------------                ----------
          Кодирование 
          ------------------------      ----------
                      Тестирование
                      -------------
                              Составление документации
                              ----------
Плюсы:
  - понятность терминов, стоимости, обьем работ
Минусы: 
  - неприспособленность к изменениям ТЗ во время выполнения
Особенность:    
  - не благоприятная для программных обьектов, особенно крупномаштабных 

Гибкие схемы - с периодически повторяющимися короткими итерациями,
для выполнения этапов. За повторяемость схемы называют: итеративными, 
циклическими, спиральными и т.п.

ТЗ (на этап ) -> Выполняй -> Тестируй -> Внедряй -> ТЗ(на этап) -> ...

Етап(Итерация) не длительная - 1-4 недели 

Плюсы: 
  - в тз легко вносятся изменения, постоянная адоптация под заказчика
Минусы:
  - тяжело рассчитать время и стоимость всего проекта 
Особенность: 
  - необходимость постоянного контакта с заказчиком и его активности

Программные проекты рекомендуется делать по гибким схемам.

---------------------------------------------------------

User Stories
На заміну технічному завданню (ТЗ) у гнучких схемах вживається
підхід складанні 'історій користувача'.
ТЗ передбачає 'технічність' - цифри,алгоритми,часові ліміти тощо.

User Stories - опис бажаної функціональності з точки зору користувача
наприклад: 'я хочу щоб реєстрація проходила у декілька етапів - 
замість заповнення величезної форми мені давали декілька коротких 
питань-полів для заповнення.'


------------- Тестування виняткових ситуаций -------------------------
Про що мова - про редагування коду(алгоритмів) на неправильні або 
сумнівні дані
Виключення та помилки:
помилка повертається методом як ознака неправильної роботи
виключення викидається кодом і обробляється в окремих блоках

Наприклад String.IndexOf(char) - якщо "char" немає у рядку --
виключення або помилка?
помилка-повернення значення '-1',яке не може бути позицією

Відкрити файл, якого немає(чи заблокований) -> FileNotFoundException
 чому виняток? тому що роботу конструктора по іншому неможна перервати

 Коли вживати помилки,коли винятки?
 - помилки застосовують там, де їх поява очікувана(пошук відсутнього елемента)
 - винятки - там, де продовження роботи неможливе з наявними даними

 Особливість системи модульного тестування полягає у тому, що Assert 
 також працює на виключення. Тобто поява виключення у новому коді
 буде сприйматись як провал тесту.Це вимагає особливих підходів до 
 тестувань ситуацій,у якій повинні бути винятки.

 = замість блоків try-catch краще вжити Assert.ThrowsException
 з метою строгої перевірки типу виключення(принцип ущагальнення
 в ньому не діє - FileNotFoundException не зарахується як Exception)
 = при передачі виняткового коду в метод слід обгорнути його 
 відкладену форму - лямбду або Action, це перенесе виконання коду
 до Assert.ThrowsException замість провалу тесту
 = для контролю параметрів винятку (повідомлення) він (виняток) повертається
 з методу Assert.ThrowsException.
 Додаткові перевірки здійснюються окремими Assert-ами.